# Query for suggestions with index

---

{NOTE: }

* Prior to this article, please refer to article [Query for Suggestions](../../client-api/session/querying/how-to-work-with-suggestions)  
  for general knowledge about Suggestions, and for dynamic-queries examples.

* In addition to getting suggested terms when making a dynamic-query,  
  you can query for similar terms when querying an index.

* This article provides examples of querying an index for suggestions.  
  Find the Suggestions API methods listed [here](../../client-api/session/querying/how-to-work-with-suggestions#syntax).

* In this page:

    * [Configure the index for suggestions](../../indexes/querying/suggestions#configure-the-index-for-suggestions)
    * [The index terms](../../indexes/querying/suggestions#the-index-terms)
    * [Suggest terms - for single term](../../indexes/querying/suggestions#suggest-terms---for-single-term)
    * [Suggest terms - for multiple terms](../..//indexes/querying/suggestions#suggest-terms---for-multiple-terms)
    * [Suggest terms - for multiple fields](../..//indexes/querying/suggestions#suggest-terms---for-multiple-fields)
    * [Suggest terms - customize options and display name](../..//indexes/querying/suggestions#suggest-terms---customize-options-and-display-name)

{NOTE/}

---

{PANEL: Configure the index for suggestions}

* In order to be able to ask for suggested terms when querying an index field,  
  that field must first be configured for suggestions in the __index definition__.

* See the following sample index:  
  (This index will be used in the examples ahead).

{CODE:nodejs suggestions_index_1@Indexes\Querying\suggestions.js /}

{NOTE: }

__Increased indexing time__:

* When configuring an index for suggestions, then during the indexing process,  
  in addition to the regular breakdown of the data into terms (tokenization),  
  RavenDB will scramble the terms to simulate common errors.

* This can impact indexing speed but the cost of querying suggestions is Not impacted.

{NOTE/}

{PANEL/}

{PANEL: The index terms}

Based on the __Northwind sample data__,  
these are the terms generated for the above index `Products/ByName`:

![Figure 1. Index terms](images/index-terms.png "Terms generated for index Products/ByName")

1. __The index-field name__ - as defined in the index definition.   
   In this example the field name is `ProductName`.

2. __The terms__ that were generated for this index-field from the documents in the Products collection.
    * The image shows a partial view out of the 163 terms in this list.
    * The terms were generated by RavenDB's [default search analyzer](../../indexes/using-analyzers#ravendb) since full-text search was set on this field.

{PANEL/}

{PANEL: Suggest terms - for single term}

Based on the __Northwind sample data__,  
the following query on the index `Products/ByName` from above has no resulting documents,  
since the term `chokolade` does Not exist in the index terms for index-field `ProductName`.

{CODE:nodejs suggestions_2@Indexes\Querying\suggestions.js /}

If you suspect that the term `chokolate` in the query criteria is written incorrectly,  
you can ask RavenDB to suggest similar terms from the index, as follows:

{CODE-TABS}
{CODE-TAB:nodejs:Query suggestions_3@Indexes\Querying\suggestions.js /}
{CODE-TAB-BLOCK:sql:RQL}
// Query for terms from index-field 'ProductName' that are similar to 'chokolade'
from index "Products/ByName"
select suggest(ProductName, "chokolade")
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{CODE:nodejs suggestions_4@Indexes\Querying\suggestions.js /}

{PANEL/}

{PANEL: Suggest terms - for multiple terms}

{CODE-TABS}
{CODE-TAB:nodejs:Query suggestions_5@Indexes\Querying\suggestions.js /}
{CODE-TAB-BLOCK:sql:RQL}
// Query for terms from index-field 'ProductName' that are similar to 'chokolade' OR 'syrop'
from index "Products/ByName" select suggest(ProductName, $p0)
{ "p0" : ["chokolade", "syrop"] }
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{CODE:nodejs suggestions_6@Indexes\Querying\suggestions.js /}

{PANEL/}

{PANEL: Suggest terms - for multiple fields}

{CODE-TABS}
{CODE-TAB:nodejs:Query suggestions_7@Indexes\Querying\suggestions.js /}
{CODE-TAB:nodejs:The_index suggestions_index_2@Indexes\Querying\suggestions.js /}
{CODE-TAB-BLOCK:sql:RQL}
// Query for suggested terms
// from index-field 'CompanyName' AND from index-field 'ContactName'
from index "Companies/ByNameAndByContactName"
select suggest(CompanyName, "chese"), suggest(ContactName, "frank")
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{CODE:nodejs suggestions_8@Indexes\Querying\suggestions.js /}

{PANEL/}

{PANEL: Suggest terms - customize options and display name}

{CODE-TABS}
{CODE-TAB:nodejs:Query suggestions_9@Indexes\Querying\suggestions.js /}
{CODE-TAB-BLOCK:sql:RQL}
// Query for suggested terms - customize options and display name
from index "Products/ByName"
select suggest(
    ProductName,
    "chokolade",
    '{ "Accuracy" : 0.3, "PageSize" : 5, "Distance" : "NGram", "SortMode" : "Popularity" }'
) as "SomeCustomName"
{CODE-TAB-BLOCK/}
{CODE-TABS/}

{CODE:nodejs suggestions_10@Indexes\Querying\suggestions.js /}

{PANEL/}

## Related Articles

### Client API

- [Query for Suggestions](../../client-api/session/querying/how-to-work-with-suggestions)
